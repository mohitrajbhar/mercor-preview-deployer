name: Deploy PR Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

env:
  AWS_REGION: us-east-1
  DOMAIN_NAME: infra-dev.devrev-eng.ai
  ECR_REPOSITORY: mercor-django

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Check if shared infrastructure exists
      id: check-shared
      run: |
        if aws s3 ls s3://test-terraform-state-bucket-mohit/shared-infrastructure/terraform.tfstate; then
          echo "shared_exists=true" >> $GITHUB_OUTPUT
        else
          echo "shared_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Deploy shared infrastructure (if needed)
      if: steps.check-shared.outputs.shared_exists == 'false'
      working-directory: ./infrastructure/terraform/shared
      run: |
        echo "Shared infrastructure not found. Deploying shared resources first..."
        terraform init
        terraform apply -auto-approve \
          -var="domain_name=${{ env.DOMAIN_NAME }}"
        echo "Shared infrastructure deployed"
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Django image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: pr-${{ github.event.number }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./django_app
        
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        terraform_wrapper: false
    
    - name: Terraform Init (PR Environment)
      working-directory: ./infrastructure/terraform/environments/pr
      run: terraform init
    
    - name: Terraform Workspace
      working-directory: ./infrastructure/terraform/environments/pr
      run: |
        terraform workspace select pr-${{ github.event.number }} || \
        terraform workspace new pr-${{ github.event.number }}
    
    - name: Terraform Plan
      working-directory: ./infrastructure/terraform/environments/pr
      env:
        TF_VAR_pr_number: ${{ github.event.number }}
        TF_VAR_django_image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:pr-${{ github.event.number }}
        TF_VAR_mongodb_image: mongo:7.0
        TF_VAR_domain_name: ${{ env.DOMAIN_NAME }}
      run: terraform plan -out=tfplan
    
    - name: Terraform Apply
      working-directory: ./infrastructure/terraform/environments/pr
      env:
        TF_VAR_pr_number: ${{ github.event.number }}
        TF_VAR_django_image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:pr-${{ github.event.number }}
        TF_VAR_mongodb_image: mongo:7.0
        TF_VAR_domain_name: ${{ env.DOMAIN_NAME }}
      run: terraform apply tfplan
    
    - name: Get deployment outputs
      working-directory: ./infrastructure/terraform/environments/pr
      id: terraform-outputs
      run: |
        echo "deployment_url=$(terraform output -raw deployment_url)" >> $GITHUB_OUTPUT
    
    - name: Wait for deployment to be ready
      run: |
        echo "‚è≥ Waiting for deployment to be ready..."
        HEALTHCHECK_URL="https://${{ steps.terraform-outputs.outputs.deployment_url }}"
        
        # Wait up to 10 minutes for the service to be healthy
        for i in {1..60}; do
          if curl -f -s "$HEALTHCHECK_URL/health/" > /dev/null; then
            echo "Deployment is healthy!"
            break
          fi
          echo "‚è≥ Waiting for deployment... (attempt $i/60)"
          sleep 10
        done
    
    - name: Run basic health checks
      run: |
        HEALTHCHECK_URL="https://${{ steps.terraform-outputs.outputs.deployment_url }}"
        
        echo "üîç Running health checks..."
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f "$HEALTHCHECK_URL/health/" | jq .
        
        # Test database connection
        echo "Testing database connection..."
        curl -f "$HEALTHCHECK_URL/api/test-db/" | jq .
        
        echo "All health checks passed!"
    
    - name: Comment PR with deployment info
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.terraform-outputs.outputs.deployment_url }}';
          const prNumber = context.issue.number;
          
          const body = `**PR Environment Deployed Successfully!**
          
          **Health Check: https://${deploymentUrl}/health/
          
          **üóÉÔ∏è Services Status:**
          - Django Application: Running on shared ECS cluster
          - MongoDB Database: Connected with isolated storage
          - SSL Certificate: Active (shared ALB)
          - Load Balancer: Healthy routing
          
          **üí° How to test:**
          \`\`\`bash
          # Test health endpoint
          curl https://${deploymentUrl}/health/
          
          \`\`\`
          
          **üîß Infrastructure:**
          - Shared VPC and networking (cost-optimized)
          - ECS Services: \`django-pr-${prNumber}\`, \`mongodb-pr-${prNumber}\`
          - Isolated EFS storage path: \`/pr-${prNumber}\`
          - Service Discovery: \`pr-${prNumber}.local\`
          
          **üí∞ Cost Benefits:**
          - Shared NAT Gateway and ALB (85% networking cost reduction)
          - Isolated application and database per PR
          - Auto-cleanup on PR close/merge
          
          This environment will be automatically destroyed when the PR is closed or merged.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  notify-failure:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
    - name: Comment PR on failure
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `‚ùå **PR Environment Deployment Failed**
            
            The deployment for PR #${{ github.event.number }} has failed. Please check the [GitHub Actions logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.
            
            **Common issues:**
            - AWS credentials or permissions
            - Shared infrastructure not deployed
            - Docker build failures
            - Domain/SSL certificate issues
            - ALB listener rule conflicts (priority conflicts)
            
            **Troubleshooting steps:**
            1. Check if shared infrastructure exists
            2. Verify ECR repository permissions
            3. Ensure SSL certificate is issued
            4. Check for PR number conflicts (same PR deployed twice)
            
            Please fix the issues and push a new commit to retry the deployment.`
          });